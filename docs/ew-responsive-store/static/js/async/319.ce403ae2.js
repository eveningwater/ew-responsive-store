"use strict";(self.webpackChunkew_responsive_store_docs=self.webpackChunkew_responsive_store_docs||[]).push([["319"],{853:function(e,n,t){t.r(n),t.d(n,{default:()=>i});var o=t(2676),s=t(453);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"examples",children:["Examples",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#examples",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["This section provides practical examples of using ",(0,o.jsx)(n.code,{children:"ew-responsive-store"})," in different scenarios."]}),"\n",(0,o.jsxs)(n.h2,{id:"basic-counter-example",children:["Basic Counter Example",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basic-counter-example",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"A simple counter that persists its value in localStorage:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\n\n// Initialize a counter with a default value of 0\nconst counter = useStorage("counter", 0);\n\n// Increment the counter\nfunction increment() {\n  counter.value++;\n}\n\n// Decrement the counter\nfunction decrement() {\n  counter.value--;\n}\n\n// Reset the counter\nfunction reset() {\n  counter.value = 0;\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"user-preferences",children:["User Preferences",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#user-preferences",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Managing user preferences that persist across sessions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\nimport { StoreType } from "ew-responsive-store/typings/core/enum";\n\n// Initialize user preferences with default values\nconst preferences = useStorage("userPreferences", {\n  theme: "light",\n  fontSize: "medium",\n  notifications: true,\n});\n\n// Toggle theme between light and dark\nfunction toggleTheme() {\n  preferences.value.theme =\n    preferences.value.theme === "light" ? "dark" : "light";\n}\n\n// Change font size\nfunction setFontSize(size) {\n  preferences.value.fontSize = size; // \'small\', \'medium\', or \'large\'\n}\n\n// Toggle notifications\nfunction toggleNotifications() {\n  preferences.value.notifications = !preferences.value.notifications;\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"shopping-cart",children:["Shopping Cart",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#shopping-cart",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Implementing a shopping cart that persists items between page refreshes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\n\n// Initialize an empty shopping cart\nconst cart = useStorage("shoppingCart", []);\n\n// Add an item to the cart\nfunction addToCart(product) {\n  const existingItem = cart.value.find((item) => item.id === product.id);\n\n  if (existingItem) {\n    // If the item already exists, increase its quantity\n    existingItem.quantity += 1;\n  } else {\n    // Otherwise, add the new item with quantity 1\n    cart.value.push({\n      ...product,\n      quantity: 1,\n    });\n  }\n}\n\n// Remove an item from the cart\nfunction removeFromCart(productId) {\n  const index = cart.value.findIndex((item) => item.id === productId);\n\n  if (index !== -1) {\n    cart.value.splice(index, 1);\n  }\n}\n\n// Update the quantity of an item\nfunction updateQuantity(productId, quantity) {\n  const item = cart.value.find((item) => item.id === productId);\n\n  if (item) {\n    item.quantity = quantity;\n  }\n}\n\n// Clear the entire cart\nfunction clearCart() {\n  cart.value = [];\n}\n\n// Calculate the total price of items in the cart\nfunction getCartTotal() {\n  return cart.value.reduce(\n    (total, item) => total + item.price * item.quantity,\n    0\n  );\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"form-state-persistence",children:["Form State Persistence",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form-state-persistence",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Saving form state to prevent data loss when navigating away:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\nimport { StoreType } from "ew-responsive-store/typings/core/enum";\n\n// Use sessionStorage for temporary form data\nconst formData = useStorage(\n  "contactForm",\n  {\n    name: "",\n    email: "",\n    message: "",\n  },\n  { storage: StoreType.SESSION }\n);\n\n// Update form fields\nfunction updateField(field, value) {\n  formData.value[field] = value;\n}\n\n// Submit the form\nfunction submitForm() {\n  // Send the data to your API\n  sendToApi(formData.value);\n\n  // Clear the form after successful submission\n  formData.value = {\n    name: "",\n    email: "",\n    message: "",\n  };\n}\n\n// Check if the form has any data\nfunction hasFormData() {\n  return (\n    formData.value.name !== "" ||\n    formData.value.email !== "" ||\n    formData.value.message !== ""\n  );\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"using-with-vuejs",children:["Using with Vue.js",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-with-vuejs",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Integrating with Vue.js components:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-vue",children:'<template>\n  <div>\n    <h2>Theme Switcher</h2>\n    <div class="theme-controls">\n      <button @click="toggleTheme">Toggle Theme</button>\n      <p>Current theme: {{ theme }}</p>\n    </div>\n\n    <h2>Counter</h2>\n    <div class="counter-controls">\n      <button @click="decrement">-</button>\n      <span>{{ count }}</span>\n      <button @click="increment">+</button>\n      <button @click="reset">Reset</button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useStorage } from "ew-responsive-store";\nimport { computed } from "vue";\n\n// Theme preference\nconst preferences = useStorage("preferences", { theme: "light" });\nconst theme = computed(() => preferences.value.theme);\n\nfunction toggleTheme() {\n  preferences.value.theme =\n    preferences.value.theme === "light" ? "dark" : "light";\n}\n\n// Counter\nconst count = useStorage("count", 0);\n\nfunction increment() {\n  count.value++;\n}\n\nfunction decrement() {\n  count.value--;\n}\n\nfunction reset() {\n  count.value = 0;\n}\n<\/script>\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"using-with-react",children:["Using with React",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-with-react",children:"#"})]}),"\n",(0,o.jsxs)(n.h3,{id:"basic-react-example-with-usereactstorage",children:["Basic React Example with useReactStorage",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basic-react-example-with-usereactstorage",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["The recommended way to use ",(0,o.jsx)(n.code,{children:"ew-responsive-store"})," with React is through the ",(0,o.jsx)(n.code,{children:"useReactStorage"})," hook:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React from "react";\nimport { useReactStorage, StoreType } from "ew-responsive-store";\n\nfunction ThemeSwitcher() {\n  const [theme, setTheme] = useReactStorage("theme", "light");\n  const [count, setCount] = useReactStorage("count", 0);\n\n  const toggleTheme = () => {\n    setTheme(theme === "light" ? "dark" : "light");\n  };\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(0);\n\n  return (\n    <div className={`app ${theme}`}>\n      <h2>Theme Switcher</h2>\n      <button onClick={toggleTheme}>Toggle Theme</button>\n      <p>Current theme: {theme}</p>\n      \n      <h2>Counter</h2>\n      <div>\n        <button onClick={decrement}>-</button>\n        <span>{count}</span>\n        <button onClick={increment}>+</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ThemeSwitcher;\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"todo-list-with-react",children:["Todo List with React",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#todo-list-with-react",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["A complete todo list example using ",(0,o.jsx)(n.code,{children:"useReactStorage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React, { useState } from "react";\nimport { useReactStorage, StoreType } from "ew-responsive-store";\n\ninterface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nfunction TodoApp() {\n  const [todos, setTodos] = useReactStorage<Todo[]>("todos", []);\n  const [inputValue, setInputValue] = useState("");\n\n  const addTodo = () => {\n    if (inputValue.trim()) {\n      const newTodo: Todo = {\n        id: Date.now(),\n        text: inputValue,\n        completed: false,\n      };\n      setTodos([...todos, newTodo]);\n      setInputValue("");\n    }\n  };\n\n  const toggleTodo = (id: number) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id: number) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter((todo) => !todo.completed));\n  };\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      \n      <div>\n        <input\n          type="text"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => e.key === "Enter" && addTodo()}\n          placeholder="Add a new todo..."\n        />\n        <button onClick={addTodo}>Add</button>\n      </div>\n\n      <div>\n        <button onClick={clearCompleted}>Clear Completed</button>\n        <p>\n          {todos.filter((t) => !t.completed).length} remaining,{" "}\n          {todos.filter((t) => t.completed).length} completed\n        </p>\n      </div>\n\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type="checkbox"\n              checked={todo.completed}\n              onChange={() => toggleTodo(todo.id)}\n            />\n            <span\n              style={{\n                textDecoration: todo.completed ? "line-through" : "none",\n              }}\n            >\n              {todo.text}\n            </span>\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoApp;\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"cross-tab-synchronization",children:["Cross-tab Synchronization",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cross-tab-synchronization",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"React components automatically sync across browser tabs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React from "react";\nimport { useReactStorage } from "ew-responsive-store";\n\nfunction MultiTabCounter() {\n  const [count, setCount] = useReactStorage("sharedCounter", 0);\n\n  return (\n    <div>\n      <h2>Shared Counter</h2>\n      <p>This counter syncs across all browser tabs!</p>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n      <button onClick={() => setCount(0)}>Reset</button>\n    </div>\n  );\n}\n\nexport default MultiTabCounter;\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"using-with-vue-legacy",children:["Using with Vue (Legacy)",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-with-vue-legacy",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"If you need to use the Vue version in React (not recommended), you can do it like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React, { useEffect, useState } from "react";\nimport { useStorage } from "ew-responsive-store";\n\nfunction ThemeSwitcher() {\n  // Initialize the storage\n  const preferences = useStorage("preferences", { theme: "light" });\n\n  // Local state to trigger re-renders\n  const [theme, setTheme] = useState(preferences.value.theme);\n\n  // Update local state when storage changes\n  useEffect(() => {\n    const updateTheme = () => {\n      setTheme(preferences.value.theme);\n    };\n\n    // Initial update\n    updateTheme();\n\n    // Subscribe to changes\n    const unsubscribe = preferences.subscribe(updateTheme);\n\n    // Cleanup\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const toggleTheme = () => {\n    preferences.value.theme =\n      preferences.value.theme === "light" ? "dark" : "light";\n  };\n\n  return (\n    <div>\n      <h2>Theme Switcher</h2>\n      <button onClick={toggleTheme}>Toggle Theme</button>\n      <p>Current theme: {theme}</p>\n    </div>\n  );\n}\n\nexport default ThemeSwitcher;\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"advanced-usage-custom-serialization",children:["Advanced Usage: Custom Serialization",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#advanced-usage-custom-serialization",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Using custom serialization for complex data structures:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useStorage, parseStr } from "ew-responsive-store";\nimport { parseStrType } from "ew-responsive-store/typings/core/enum";\n\n// Custom serialization for a Date object\nconst lastVisit = useStorage("lastVisit", new Date(), {\n  serializer: (date) => date.toISOString(),\n  deserializer: (dateStr) => new Date(dateStr),\n});\n\n// Update the last visit time to now\nfunction updateLastVisit() {\n  lastVisit.value = new Date();\n}\n\n// Get a formatted string of the last visit time\nfunction getFormattedLastVisit() {\n  return lastVisit.value.toLocaleString();\n}\n'})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}let i=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["en%2Fexamples%2Findex.md"]={toc:[{text:"Basic Counter Example",id:"basic-counter-example",depth:2},{text:"User Preferences",id:"user-preferences",depth:2},{text:"Shopping Cart",id:"shopping-cart",depth:2},{text:"Form State Persistence",id:"form-state-persistence",depth:2},{text:"Using with Vue.js",id:"using-with-vuejs",depth:2},{text:"Using with React",id:"using-with-react",depth:2},{text:"Basic React Example with useReactStorage",id:"basic-react-example-with-usereactstorage",depth:3},{text:"Todo List with React",id:"todo-list-with-react",depth:3},{text:"Cross-tab Synchronization",id:"cross-tab-synchronization",depth:3},{text:"Using with Vue (Legacy)",id:"using-with-vue-legacy",depth:3},{text:"Advanced Usage: Custom Serialization",id:"advanced-usage-custom-serialization",depth:2}],title:"Examples",headingTitle:"Examples",frontmatter:{}}}}]);