"use strict";(self.webpackChunkew_responsive_store_docs=self.webpackChunkew_responsive_store_docs||[]).push([["988"],{8497:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(2676),t=s(453);function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",strong:"strong"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"开始使用",children:["开始使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开始使用",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"介绍",children:["介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你的项目中需要使用会话存储（",(0,r.jsx)(n.code,{children:"localStorage"})," 或 ",(0,r.jsx)(n.code,{children:"sessionStorage"}),"）来保存数据，且希望这些数据在页面刷新后依然能保留，并且能够在数据变化时自动更新界面，那么 ",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 是完美的解决方案。"]}),"\n",(0,r.jsx)(n.p,{children:"它的体积不到 1 KB，简单易用，只需要调用一个方法就能将会话存储的数据变成响应式数据，可以广泛应用于各种框架的项目中，甚至是原生 JavaScript 项目，该库还具备完善的单元测试和类型推导。"}),"\n",(0,r.jsxs)(n.h2,{id:"安装",children:["安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先，你需要安装 ",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 包。可以通过以下命令安装："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install ew-responsive-store\n# 或者使用 pnpm\npnpm add ew-responsive-store\n# 或者使用 yarn\nyarn add ew-responsive-store\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"框架依赖",children:["框架依赖",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架依赖",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["自 v0.0.3 起，",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 支持多个框架。你只需要安装你正在使用的框架："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# React\nnpm install react\n\n# Vue\nnpm install @vue/reactivity @vue/shared\n\n# Preact\nnpm install preact\n\n# Solid\nnpm install solid-js\n\n# Svelte\nnpm install svelte\n\n# Angular\nnpm install @angular/core\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"注意"}),"：框架依赖作为外部依赖处理，因此不会打包到你的应用中，保持库的体积最小。"]}),"\n",(0,r.jsxs)(n.h2,{id:"框架专用导入",children:["框架专用导入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架专用导入",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"自 v0.0.3 起，你应该从框架专用入口点导入："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Vue\nimport { useStorage } from 'ew-responsive-store/vue';\n\n// React\nimport { useStorage } from 'ew-responsive-store/react';\n\n// Preact\nimport { useStorage } from 'ew-responsive-store/preact';\n\n// Solid\nimport { useStorage } from 'ew-responsive-store/solid';\n\n// Svelte\nimport { useStorage } from 'ew-responsive-store/svelte';\n\n// Angular\nimport { useStorage } from 'ew-responsive-store/angular';\n\n// 原生 JavaScript\nimport { useStorage } from 'ew-responsive-store/vanilla';\n// 或者\nimport { useStorage } from 'ew-responsive-store';\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"基本使用",children:["基本使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 包的核心导出了两个方法：",(0,r.jsx)(n.code,{children:"parseStr"})," 和 ",(0,r.jsx)(n.code,{children:"useStorage"}),"。其中，",(0,r.jsx)(n.code,{children:"useStorage"})," 用于将会话存储的数据变为响应式数据。"]}),"\n",(0,r.jsxs)(n.h3,{id:"基本值",children:["基本值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本值",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以使用 ",(0,r.jsx)(n.code,{children:"useStorage"})," 来实现基本值的响应式。例如，假设你有一个计数器，存储在 ",(0,r.jsx)(n.code,{children:"localStorage"})," 中："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store/vue";\n\n// 初始化 count，默认值为 0\nconst count = useStorage("count", 0);\n\n// 修改 count\ncount.value++; // count 值变为 1\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Vue 模板代码"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vue",children:'<template>\n  <p>{{ count }}</p>\n  <button @click="count++">点击我</button>\n</template>\n\n<script setup>\nimport { useStorage } from "ew-responsive-store/vue";\n\nconst count = useStorage("count", 0);\n<\/script>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["此时，",(0,r.jsx)(n.code,{children:"count"})," 的值会保存在浏览器的会话存储中，并且它是响应式的，即页面刷新后 ",(0,r.jsx)(n.code,{children:"count"})," 依然保留并且视图会自动更新。"]}),"\n",(0,r.jsxs)(n.h3,{id:"对象值",children:["对象值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象值",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"同样地，你可以将对象存储为响应式数据："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store/vue";\n\n// 初始化 userInfo 对象\nconst userInfo = useStorage("user", { name: "eveningwater" });\n\n// 修改 userInfo 对象\nuserInfo.value.name = "夕水"; // userInfo 的 name 属性变为 \'夕水\'\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当修改 ",(0,r.jsx)(n.code,{children:"userInfo"})," 的 ",(0,r.jsx)(n.code,{children:"name"})," 属性时，视图会自动更新，并且数据会保存在会话存储中。"]}),"\n",(0,r.jsxs)(n.h3,{id:"数组值",children:["数组值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组值",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"你还可以存储数组，并且它也是响应式的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store/vue";\n\n// 初始化一个数组\nconst countList = useStorage("countList", [1, 2, 3]);\n\n// 修改数组\ncountList.value.push(4); // 数组变为 [1, 2, 3, 4]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["有关更高级的用法和配置选项，请查看 ",(0,r.jsx)(n.a,{href:"/zh/api/",children:"API 参考"})," 部分。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fguide%2Findex.md"]={toc:[{text:"介绍",id:"介绍",depth:2},{text:"安装",id:"安装",depth:2},{text:"框架依赖",id:"框架依赖",depth:3},{text:"框架专用导入",id:"框架专用导入",depth:2},{text:"基本使用",id:"基本使用",depth:2},{text:"基本值",id:"基本值",depth:3},{text:"对象值",id:"对象值",depth:3},{text:"数组值",id:"数组值",depth:3}],title:"开始使用",headingTitle:"开始使用",frontmatter:{}}}}]);