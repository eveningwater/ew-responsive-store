"use strict";(self.webpackChunkew_responsive_store_docs=self.webpackChunkew_responsive_store_docs||[]).push([["257"],{3461:function(e,n,t){t.r(n),t.d(n,{default:()=>c});var r=t(2676),s=t(453);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本节提供了在不同场景中使用 ",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 的实用示例。"]}),"\n",(0,r.jsxs)(n.h2,{id:"基础计数器示例",children:["基础计数器示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础计数器示例",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一个简单的计数器，其值在 localStorage 中持久化："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\n\n// 初始化一个计数器，默认值为 0\nconst counter = useStorage("counter", 0);\n\n// 增加计数器\nfunction increment() {\n  counter.value++;\n}\n\n// 减少计数器\nfunction decrement() {\n  counter.value--;\n}\n\n// 重置计数器\nfunction reset() {\n  counter.value = 0;\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"用户偏好设置",children:["用户偏好设置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户偏好设置",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"管理在会话之间持久化的用户偏好设置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\nimport { StoreType } from "ew-responsive-store/typings/core/enum";\n\n// 初始化用户偏好设置，设置默认值\nconst preferences = useStorage("userPreferences", {\n  theme: "light",\n  fontSize: "medium",\n  notifications: true,\n});\n\n// 在亮色和暗色主题之间切换\nfunction toggleTheme() {\n  preferences.value.theme =\n    preferences.value.theme === "light" ? "dark" : "light";\n}\n\n// 更改字体大小\nfunction setFontSize(size) {\n  preferences.value.fontSize = size; // \'small\', \'medium\', 或 \'large\'\n}\n\n// 切换通知\nfunction toggleNotifications() {\n  preferences.value.notifications = !preferences.value.notifications;\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"购物车",children:["购物车",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#购物车",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"实现在页面刷新之间持久化商品的购物车："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\n\n// 初始化一个空购物车\nconst cart = useStorage("shoppingCart", []);\n\n// 向购物车添加商品\nfunction addToCart(product) {\n  const existingItem = cart.value.find((item) => item.id === product.id);\n\n  if (existingItem) {\n    // 如果商品已存在，增加其数量\n    existingItem.quantity += 1;\n  } else {\n    // 否则，添加新商品，数量为 1\n    cart.value.push({\n      ...product,\n      quantity: 1,\n    });\n  }\n}\n\n// 从购物车移除商品\nfunction removeFromCart(productId) {\n  const index = cart.value.findIndex((item) => item.id === productId);\n\n  if (index !== -1) {\n    cart.value.splice(index, 1);\n  }\n}\n\n// 更新商品数量\nfunction updateQuantity(productId, quantity) {\n  const item = cart.value.find((item) => item.id === productId);\n\n  if (item) {\n    item.quantity = quantity;\n  }\n}\n\n// 清空整个购物车\nfunction clearCart() {\n  cart.value = [];\n}\n\n// 计算购物车中商品的总价\nfunction getCartTotal() {\n  return cart.value.reduce(\n    (total, item) => total + item.price * item.quantity,\n    0\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"表单状态持久化",children:["表单状态持久化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单状态持久化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"保存表单状态，防止在导航离开时数据丢失："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\nimport { StoreType } from "ew-responsive-store/typings/core/enum";\n\n// 使用 sessionStorage 存储临时表单数据\nconst formData = useStorage(\n  "contactForm",\n  {\n    name: "",\n    email: "",\n    message: "",\n  },\n  { storage: StoreType.SESSION }\n);\n\n// 更新表单字段\nfunction updateField(field, value) {\n  formData.value[field] = value;\n}\n\n// 提交表单\nfunction submitForm() {\n  // 将数据发送到 API\n  sendToApi(formData.value);\n\n  // 成功提交后清空表单\n  formData.value = {\n    name: "",\n    email: "",\n    message: "",\n  };\n}\n\n// 检查表单是否有数据\nfunction hasFormData() {\n  return (\n    formData.value.name !== "" ||\n    formData.value.email !== "" ||\n    formData.value.message !== ""\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"与-vuejs-一起使用",children:["与 Vue.js 一起使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-vuejs-一起使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"与 Vue.js 组件集成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vue",children:'<template>\n  <div>\n    <h2>主题切换器</h2>\n    <div class="theme-controls">\n      <button @click="toggleTheme">切换主题</button>\n      <p>当前主题: {{ theme }}</p>\n    </div>\n\n    <h2>计数器</h2>\n    <div class="counter-controls">\n      <button @click="decrement">-</button>\n      <span>{{ count }}</span>\n      <button @click="increment">+</button>\n      <button @click="reset">重置</button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useStorage } from "ew-responsive-store";\nimport { computed } from "vue";\n\n// 主题偏好\nconst preferences = useStorage("preferences", { theme: "light" });\nconst theme = computed(() => preferences.value.theme);\n\nfunction toggleTheme() {\n  preferences.value.theme =\n    preferences.value.theme === "light" ? "dark" : "light";\n}\n\n// 计数器\nconst count = useStorage("count", 0);\n\nfunction increment() {\n  count.value++;\n}\n\nfunction decrement() {\n  count.value--;\n}\n\nfunction reset() {\n  count.value = 0;\n}\n<\/script>\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"与-react-一起使用",children:["与 React 一起使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-react-一起使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"与 React 组件集成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { useEffect, useState } from "react";\nimport { useStorage } from "ew-responsive-store";\n\nfunction ThemeSwitcher() {\n  // 初始化存储\n  const preferences = useStorage("preferences", { theme: "light" });\n\n  // 本地状态触发重新渲染\n  const [theme, setTheme] = useState(preferences.value.theme);\n\n  // 当存储变化时更新本地状态\n  useEffect(() => {\n    const updateTheme = () => {\n      setTheme(preferences.value.theme);\n    };\n\n    // 初始更新\n    updateTheme();\n\n    // 订阅变化\n    const unsubscribe = preferences.subscribe(updateTheme);\n\n    // 清理\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const toggleTheme = () => {\n    preferences.value.theme =\n      preferences.value.theme === "light" ? "dark" : "light";\n  };\n\n  return (\n    <div>\n      <h2>主题切换器</h2>\n      <button onClick={toggleTheme}>切换主题</button>\n      <p>当前主题: {theme}</p>\n    </div>\n  );\n}\n\nexport default ThemeSwitcher;\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"高级用法自定义序列化",children:["高级用法：自定义序列化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级用法自定义序列化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"为复杂数据结构使用自定义序列化："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage, parseStr } from "ew-responsive-store";\nimport { parseStrType } from "ew-responsive-store/typings/core/enum";\n\n// 为 Date 对象自定义序列化\nconst lastVisit = useStorage("lastVisit", new Date(), {\n  serializer: (date) => date.toISOString(),\n  deserializer: (dateStr) => new Date(dateStr),\n});\n\n// 将最后访问时间更新为现在\nfunction updateLastVisit() {\n  lastVisit.value = new Date();\n}\n\n// 获取最后访问时间的格式化字符串\nfunction getFormattedLastVisit() {\n  return lastVisit.value.toLocaleString();\n}\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fexamples%2Findex.md"]={toc:[{text:"基础计数器示例",id:"基础计数器示例",depth:2},{text:"用户偏好设置",id:"用户偏好设置",depth:2},{text:"购物车",id:"购物车",depth:2},{text:"表单状态持久化",id:"表单状态持久化",depth:2},{text:"与 Vue.js 一起使用",id:"与-vuejs-一起使用",depth:2},{text:"与 React 一起使用",id:"与-react-一起使用",depth:2},{text:"高级用法：自定义序列化",id:"高级用法自定义序列化",depth:2}],title:"示例",headingTitle:"示例",frontmatter:{}}}}]);