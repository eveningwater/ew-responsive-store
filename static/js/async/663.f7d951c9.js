"use strict";(self.webpackChunkew_responsive_store_docs=self.webpackChunkew_responsive_store_docs||[]).push([["663"],{5210:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(2676),d=s(453);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",strong:"strong",ol:"ol",li:"li",code:"code",pre:"pre",hr:"hr",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",ul:"ul"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"api-参考",children:["API 参考",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-参考",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"️-重要版本说明",children:["⚠️ 重要版本说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#️-重要版本说明",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"v003-破坏性变更",children:["v0.0.3 破坏性变更",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#v003-破坏性变更",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"v0.0.3"})," 版本引入了重大变更，包括："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"框架专用入口点"}),"：现在需要从特定的框架入口点导入"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"统一的API"}),"：所有框架都使用 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数名"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"零外部依赖"}),"：框架依赖作为外部依赖处理"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"迁移指南",children:["迁移指南",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#迁移指南",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"旧版本 (v0.0.1-beta.8 及之前)"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { useStorage } from 'ew-responsive-store';\nimport { useReactStorage } from 'ew-responsive-store';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"新版本 (v0.0.3+)"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Vue\nimport { useStorage } from 'ew-responsive-store/vue';\n\n// React\nimport { useStorage } from 'ew-responsive-store/react';\n\n// 其他框架...\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"v003-多框架支持",children:["v0.0.3+ 多框架支持",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#v003-多框架支持",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-vue---v003",children:["useStorage (Vue) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-vue---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useStorage"})," 函数是 ",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 库的核心 API。它允许你创建与浏览器存储（localStorage 或 sessionStorage）同步的响应式状态。"]}),"\n",(0,r.jsxs)(n.h3,{id:"类型定义",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function useStorage<T>(\n  key: string,\n  initialValue: T,\n  options: StoreOptions = {\n    storage: StoreType.LOCAL,\n    immediate: true,\n    deep: true,\n  }\n): Ref<T>;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"参数",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"key"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:"用于在存储中存储值的键"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"initialValue"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.td,{children:"如果在存储中找不到值，则使用的初始值"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreOptions"})}),"\n",(0,r.jsx)(n.td,{children:"配置选项（可选）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"选项",children:["选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选项",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"options"})," 参数接受以下属性："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"属性"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"默认值"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"storage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType.LOCAL"})}),"\n",(0,r.jsxs)(n.td,{children:["要使用的存储类型（",(0,r.jsx)(n.code,{children:"localStorage"})," 或 ",(0,r.jsx)(n.code,{children:"sessionStorage"}),"）"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deep"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),"\n",(0,r.jsx)(n.td,{children:"是否深度监视状态变化"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，所有 Vue 的 watch 选项都受支持，因为 ",(0,r.jsx)(n.code,{children:"StoreOptions"})," 扩展了 Vue 的 ",(0,r.jsx)(n.code,{children:"WatchOptions"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"返回值",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["一个与指定存储同步的响应式 ",(0,r.jsx)(n.code,{children:"Ref<T>"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store/vue";\nimport { StoreType } from "ew-responsive-store";\n\n// 基本用法，使用 localStorage\nconst count = useStorage("count", 0);\n\n// 使用 sessionStorage\nconst user = useStorage(\n  "user",\n  { name: "张三" },\n  { storage: StoreType.SESSION }\n);\n\n// 禁用深度监视\nconst list = useStorage("list", [1, 2, 3], { deep: false });\n\n// 禁用立即效果\nconst settings = useStorage(\n  "settings",\n  { theme: "dark" },\n  { immediate: false }\n);\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-react---v003",children:["useStorage (React) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-react---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["React 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，提供 React 原生的使用体验。"]}),"\n",(0,r.jsxs)(n.h4,{id:"类型定义-1",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义-1",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function useStorage<T>(\n  key: string,\n  initialValue: T,\n  options: ReactStoreOptions = {\n    storage: StoreType.LOCAL,\n  }\n): readonly [T, (newValue: T) => void];\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"参数-1",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-1",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"key"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:"用于在存储中存储值的键"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"initialValue"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.td,{children:"如果在存储中找不到值，则使用的初始值"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ReactStoreOptions"})}),"\n",(0,r.jsx)(n.td,{children:"配置选项（可选）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"选项-1",children:["选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选项-1",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"options"})," 参数接受以下属性："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"属性"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"默认值"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"storage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType.LOCAL"})}),"\n",(0,r.jsxs)(n.td,{children:["要使用的存储类型（",(0,r.jsx)(n.code,{children:"localStorage"})," 或 ",(0,r.jsx)(n.code,{children:"sessionStorage"}),"）"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"返回值-1",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一个包含以下内容的元组："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[0]"}),": 当前值，类型为 ",(0,r.jsx)(n.code,{children:"T"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[1]"}),": 用于更新值的设置函数"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"示例-1",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-1",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from \'react\';\nimport { useStorage, StoreType } from "ew-responsive-store/react";\n\nfunction Counter() {\n  // 基本用法，使用 localStorage\n  const [count, setCount] = useStorage("count", 0);\n  \n  // 使用 sessionStorage\n  const [user, setUser] = useStorage(\n    "user",\n    { name: "张三", age: 25 },\n    { storage: StoreType.SESSION }\n  );\n\n  const increment = () => setCount(count + 1);\n\n  return (\n    <div>\n      <p>计数: {count}</p>\n      <button onClick={increment}>增加</button>\n      \n      <p>用户: {user.name} ({user.age}岁)</p>\n      <button onClick={() => setUser({ ...user, age: user.age + 1 })}>\n        增加年龄\n      </button>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-preact---v003",children:["useStorage (Preact) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-preact---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Preact 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，与 React API 相同但针对 Preact 优化。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useStorage } from "ew-responsive-store/preact";\n\nfunction Counter() {\n  const [count, setCount] = useStorage("count", 0);\n  return <div>Count: {count}</div>;\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-solid---v003",children:["useStorage (Solid) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-solid---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Solid 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，返回 Solid 的 signal。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useStorage } from "ew-responsive-store/solid";\n\nfunction Counter() {\n  const [count, setCount] = useStorage("count", 0);\n  return <div>Count: {count()}</div>;\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-svelte---v003",children:["useStorage (Svelte) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-svelte---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Svelte 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，返回 Svelte store。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'<script>\n  import { useStorage } from "ew-responsive-store/svelte";\n  \n  const store = useStorage("count", 0);\n  let count = $store;\n<\/script>\n\n<div>Count: {count}</div>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-angular---v003",children:["useStorage (Angular) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-angular---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Angular 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，返回 Angular signal。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Component } from \'@angular/core\';\nimport { useStorage } from "ew-responsive-store/angular";\n\n@Component({\n  template: `<div>Count: {{ count() }}</div>`\n})\nexport class CounterComponent {\n  private storage = useStorage("count", 0);\n  count = this.storage.value;\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-vanilla-js---v003",children:["useStorage (Vanilla JS) - v0.0.3+",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-vanilla-js---v003",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["原生 JavaScript 版本的 ",(0,r.jsx)(n.code,{children:"useStorage"})," 函数，返回存储管理器对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { useStorage } from "ew-responsive-store/vanilla";\n\nconst storage = useStorage("count", 0);\n\n// 获取当前值\nconsole.log(storage.value); // 0\n\n// 更新值\nstorage.setValue(1);\nconsole.log(storage.value); // 1\n\n// 订阅变化\nstorage.subscribe((newValue) => {\n  console.log("Value changed:", newValue);\n});\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"历史版本-api-v001-beta8-及之前",children:["历史版本 API (v0.0.1-beta.8 及之前)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#历史版本-api-v001-beta8-及之前",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"usestorage-vue---v001-beta8",children:["useStorage (Vue) - v0.0.1-beta.8",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usestorage-vue---v001-beta8",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useStorage"})," 函数是 ",(0,r.jsx)(n.code,{children:"ew-responsive-store"})," 库的核心 API。它允许你创建与浏览器存储（localStorage 或 sessionStorage）同步的响应式状态。"]}),"\n",(0,r.jsxs)(n.h4,{id:"类型定义-2",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义-2",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function useStorage<T>(\n  key: string,\n  initialValue: T,\n  options: StoreOptions = {\n    storage: StoreType.LOCAL,\n    immediate: true,\n    deep: true,\n  }\n): Ref<T>;\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"参数-2",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-2",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"key"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:"用于在存储中存储值的键"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"initialValue"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.td,{children:"如果在存储中找不到值，则使用的初始值"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreOptions"})}),"\n",(0,r.jsx)(n.td,{children:"配置选项（可选）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"选项-2",children:["选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选项-2",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"options"})," 参数接受以下属性："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"属性"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"默认值"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"storage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType.LOCAL"})}),"\n",(0,r.jsxs)(n.td,{children:["要使用的存储类型（",(0,r.jsx)(n.code,{children:"localStorage"})," 或 ",(0,r.jsx)(n.code,{children:"sessionStorage"}),"）"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deep"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),"\n",(0,r.jsx)(n.td,{children:"是否深度监视状态变化"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，所有 Vue 的 watch 选项都受支持，因为 ",(0,r.jsx)(n.code,{children:"StoreOptions"})," 扩展了 Vue 的 ",(0,r.jsx)(n.code,{children:"WatchOptions"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"返回值-2",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值-2",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["一个与指定存储同步的响应式 ",(0,r.jsx)(n.code,{children:"Ref<T>"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"示例-2",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-2",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useStorage } from "ew-responsive-store";\nimport { StoreType } from "ew-responsive-store/typings/core/enum";\n\n// 基本用法，使用 localStorage\nconst count = useStorage("count", 0);\n\n// 使用 sessionStorage\nconst user = useStorage(\n  "user",\n  { name: "张三" },\n  { storage: StoreType.SESSION }\n);\n\n// 禁用深度监视\nconst list = useStorage("list", [1, 2, 3], { deep: false });\n\n// 禁用立即效果\nconst settings = useStorage(\n  "settings",\n  { theme: "dark" },\n  { immediate: false }\n);\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"usereactstorage-react---v001-beta7",children:["useReactStorage (React) - v0.0.1-beta.7",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usereactstorage-react---v001-beta7",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useReactStorage"})," 函数专为 React 应用程序设计。它提供了一种 React 原生的方式来管理与浏览器存储同步的状态。"]}),"\n",(0,r.jsxs)(n.h3,{id:"类型定义-3",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义-3",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function useReactStorage<T>(\n  key: string,\n  initialValue: T,\n  options: ReactStoreOptions = {\n    storage: StoreType.LOCAL,\n  }\n): readonly [T, (newValue: T) => void];\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"参数-3",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-3",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"key"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:"用于在存储中存储值的键"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"initialValue"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.td,{children:"如果在存储中找不到值，则使用的初始值"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"options"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ReactStoreOptions"})}),"\n",(0,r.jsx)(n.td,{children:"配置选项（可选）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"选项-3",children:["选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选项-3",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"options"})," 参数接受以下属性："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"属性"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"默认值"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"storage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StoreType.LOCAL"})}),"\n",(0,r.jsxs)(n.td,{children:["要使用的存储类型（",(0,r.jsx)(n.code,{children:"localStorage"})," 或 ",(0,r.jsx)(n.code,{children:"sessionStorage"}),"）"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"返回值-3",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值-3",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一个包含以下内容的元组："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[0]"}),": 当前值，类型为 ",(0,r.jsx)(n.code,{children:"T"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[1]"}),": 用于更新值的设置函数"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例-3",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-3",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from \'react\';\nimport { useReactStorage, StoreType } from "ew-responsive-store";\n\nfunction Counter() {\n  // 基本用法，使用 localStorage\n  const [count, setCount] = useReactStorage("count", 0);\n  \n  // 使用 sessionStorage\n  const [user, setUser] = useReactStorage(\n    "user",\n    { name: "张三", age: 25 },\n    { storage: StoreType.SESSION }\n  );\n\n  // 复杂数据类型\n  const [todos, setTodos] = useReactStorage("todos", [\n    { id: 1, text: "学习 React", completed: false },\n    { id: 2, text: "学习 TypeScript", completed: true }\n  ]);\n\n  const increment = () => setCount(count + 1);\n  const addTodo = (text: string) => {\n    setTodos([...todos, { \n      id: Date.now(), \n      text, \n      completed: false \n    }]);\n  };\n\n  return (\n    <div>\n      <p>计数: {count}</p>\n      <button onClick={increment}>增加</button>\n      \n      <p>用户: {user.name} ({user.age}岁)</p>\n      <button onClick={() => setUser({ ...user, age: user.age + 1 })}>\n        增加年龄\n      </button>\n      \n      <div>\n        <h3>待办事项:</h3>\n        {todos.map(todo => (\n          <div key={todo.id}>\n            <span style={{ textDecoration: todo.completed ? \'line-through\' : \'none\' }}>\n              {todo.text}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"跨标签页同步",children:["跨标签页同步",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨标签页同步",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useReactStorage"})," 使用 ",(0,r.jsx)(n.code,{children:"storage"})," 事件自动同步不同浏览器标签页之间的数据："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useReactStorage } from "ew-responsive-store";\n\nfunction App() {\n  const [theme, setTheme] = useReactStorage("theme", "light");\n  \n  // 当改变时，这会在其他标签页中自动更新\n  const toggleTheme = () => {\n    setTheme(theme === "light" ? "dark" : "light");\n  };\n\n  return (\n    <div className={`app ${theme}`}>\n      <button onClick={toggleTheme}>\n        切换到 {theme === "light" ? "深色" : "浅色"} 主题\n      </button>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"错误处理",children:["错误处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果存储不可用，该钩子会抛出错误："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useReactStorage } from "ew-responsive-store";\n\nfunction SafeStorage() {\n  try {\n    const [data, setData] = useReactStorage("data", {});\n    return <div>存储可用</div>;\n  } catch (error) {\n    return <div>存储不可用: {error.message}</div>;\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"parsestr",children:["parseStr",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsestr",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"parseStr"})," 函数是一个用于解析字符串值的实用工具。它提供了两种解析模式：",(0,r.jsx)(n.code,{children:"EVAL"})," 和 ",(0,r.jsx)(n.code,{children:"JSON"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"类型定义-4",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义-4",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function parseStr<T>(\n  str: string,\n  type: parseStrType = parseStrType.JSON\n): T | null;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"参数-4",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-4",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:"要解析的字符串"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"parseStrType"})}),"\n",(0,r.jsxs)(n.td,{children:["要使用的解析方法（",(0,r.jsx)(n.code,{children:"JSON"})," 或 ",(0,r.jsx)(n.code,{children:"EVAL"}),"）"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"返回值-4",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值-4",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["类型为 ",(0,r.jsx)(n.code,{children:"T"})," 的解析值，如果解析失败则为 ",(0,r.jsx)(n.code,{children:"null"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例-4",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-4",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { parseStr, ParseStrType } from "ew-responsive-store";\n\n// 解析 JSON\nconst data = parseStr<{ name: string }>(\'{ "name": "张三" }\');\n// 结果: { name: \'张三\' }\n\n// 执行 JavaScript 代码\nconst result = parseStr<number>("1 + 2", ParseStrType.EVAL);\n// 结果: 3\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"实用函数",children:["实用函数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实用函数",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"isvalidjson",children:["isValidJSON",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isvalidjson",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"检查字符串是否为有效的 JSON。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function isValidJSON(val: string): boolean;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"isstorageenabled",children:["isStorageEnabled",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isstorageenabled",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"检查当前环境中是否启用了存储类型。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function isStorageEnabled(storage: Storage): boolean;\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"枚举",children:["枚举",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#枚举",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"storetype",children:["StoreType",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#storetype",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"定义可用的存储类型。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'enum StoreType {\n  LOCAL = "localStorage",\n  SESSION = "sessionStorage",\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"parsestrtype",children:["parseStrType",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsestrtype",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["定义 ",(0,r.jsx)(n.code,{children:"parseStr"})," 的可用解析方法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'enum parseStrType {\n  EVAL = "eval",\n  JSON = "json",\n}\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fapi%2Findex.md"]={toc:[{text:"⚠️ 重要版本说明",id:"️-重要版本说明",depth:2},{text:"v0.0.3 破坏性变更",id:"v003-破坏性变更",depth:3},{text:"迁移指南",id:"迁移指南",depth:3},{text:"v0.0.3+ 多框架支持",id:"v003-多框架支持",depth:2},{text:"useStorage (Vue) - v0.0.3+",id:"usestorage-vue---v003",depth:3},{text:"类型定义",id:"类型定义",depth:3},{text:"参数",id:"参数",depth:3},{text:"选项",id:"选项",depth:3},{text:"返回值",id:"返回值",depth:3},{text:"示例",id:"示例",depth:3},{text:"useStorage (React) - v0.0.3+",id:"usestorage-react---v003",depth:3},{text:"类型定义",id:"类型定义-1",depth:4},{text:"参数",id:"参数-1",depth:4},{text:"选项",id:"选项-1",depth:4},{text:"返回值",id:"返回值-1",depth:4},{text:"示例",id:"示例-1",depth:4},{text:"useStorage (Preact) - v0.0.3+",id:"usestorage-preact---v003",depth:3},{text:"useStorage (Solid) - v0.0.3+",id:"usestorage-solid---v003",depth:3},{text:"useStorage (Svelte) - v0.0.3+",id:"usestorage-svelte---v003",depth:3},{text:"useStorage (Angular) - v0.0.3+",id:"usestorage-angular---v003",depth:3},{text:"useStorage (Vanilla JS) - v0.0.3+",id:"usestorage-vanilla-js---v003",depth:3},{text:"历史版本 API (v0.0.1-beta.8 及之前)",id:"历史版本-api-v001-beta8-及之前",depth:2},{text:"useStorage (Vue) - v0.0.1-beta.8",id:"usestorage-vue---v001-beta8",depth:3},{text:"类型定义",id:"类型定义-2",depth:4},{text:"参数",id:"参数-2",depth:4},{text:"选项",id:"选项-2",depth:4},{text:"返回值",id:"返回值-2",depth:4},{text:"示例",id:"示例-2",depth:4},{text:"useReactStorage (React) - v0.0.1-beta.7",id:"usereactstorage-react---v001-beta7",depth:2},{text:"类型定义",id:"类型定义-3",depth:3},{text:"参数",id:"参数-3",depth:3},{text:"选项",id:"选项-3",depth:3},{text:"返回值",id:"返回值-3",depth:3},{text:"示例",id:"示例-3",depth:3},{text:"跨标签页同步",id:"跨标签页同步",depth:3},{text:"错误处理",id:"错误处理",depth:3},{text:"parseStr",id:"parsestr",depth:2},{text:"类型定义",id:"类型定义-4",depth:3},{text:"参数",id:"参数-4",depth:3},{text:"返回值",id:"返回值-4",depth:3},{text:"示例",id:"示例-4",depth:3},{text:"实用函数",id:"实用函数",depth:2},{text:"isValidJSON",id:"isvalidjson",depth:3},{text:"isStorageEnabled",id:"isstorageenabled",depth:3},{text:"枚举",id:"枚举",depth:2},{text:"StoreType",id:"storetype",depth:3},{text:"parseStrType",id:"parsestrtype",depth:3}],title:"API 参考",headingTitle:"API 参考",frontmatter:{}}}}]);