[{"id":0,"title":"API Reference","content":"#\n\n\n⚠️ Important Version Notice#\n\n\nv0.0.3 Breaking Changes#\n\nv0.0.3 introduces major changes including:\n\n 1. Framework-specific entry points: Now requires importing from specific\n    framework entry points\n 2. Unified API: All frameworks use the useStorage function name\n 3. Zero external dependencies: Framework dependencies are treated as external\n\n\nMigration Guide#\n\nOld version (v0.0.1-beta.8 and earlier):\n\n\n\nNew version (v0.0.3+):\n\n\n\n--------------------------------------------------------------------------------\n\n\nv0.0.3+ Multi-Framework Support#\n\n\nuseStorage (Vue) - v0.0.3+#\n\nThe useStorage function is the core API of the ew-responsive-store library. It\nallows you to create reactive state that is synchronized with browser storage\n(localStorage or sessionStorage).\n\n\nType Definition#\n\n\n\n\nParameters#\n\nPARAMETER      TYPE           DESCRIPTION\nkey            string         The key to use for storing the value in storage\ninitialValue   T              The initial value to use if no value is found in storage\noptions        StoreOptions   Configuration options (optional)\n\n\nOptions#\n\nThe options parameter accepts the following properties:\n\nPROPERTY   TYPE        DEFAULT           DESCRIPTION\nstorage    StoreType   StoreType.LOCAL   The storage type to use (localStorage or sessionStorage)\ndeep       boolean     true              Whether to deeply watch the state for changes\n\nAdditionally, all Vue watch options are supported, as StoreOptions extends\nWatchOptions from Vue.\n\n\nReturns#\n\nA reactive Ref<T> that is synchronized with the specified storage.\n\n\nExample#\n\n\n\n\nuseStorage (React) - v0.0.3+#\n\nReact version of the useStorage function, providing a React-native experience.\n\nType Definition#\n\n\n\nParameters#\n\nPARAMETER      TYPE                DESCRIPTION\nkey            string              The key to use for storing the value in storage\ninitialValue   T                   The initial value to use if no value is found in storage\noptions        ReactStoreOptions   Configuration options (optional)\n\nOptions#\n\nThe options parameter accepts the following properties:\n\nPROPERTY   TYPE        DEFAULT           DESCRIPTION\nstorage    StoreType   StoreType.LOCAL   The storage type to use (localStorage or sessionStorage)\n\nReturns#\n\nA tuple containing:\n\n * [0]: The current value of type T\n * [1]: A setter function to update the value\n\nExample#\n\n\n\n\nuseStorage (Preact) - v0.0.3+#\n\nPreact version of the useStorage function, same API as React but optimized for\nPreact.\n\n\n\n\nuseStorage (Solid) - v0.0.3+#\n\nSolid version of the useStorage function, returns Solid signals.\n\n\n\n\nuseStorage (Svelte) - v0.0.3+#\n\nSvelte version of the useStorage function, returns Svelte store.\n\n\n\n\nuseStorage (Angular) - v0.0.3+#\n\nAngular version of the useStorage function, returns Angular signals.\n\n\n\n\nuseStorage (Vanilla JS) - v0.0.3+#\n\nVanilla JavaScript version of the useStorage function, returns a storage manager\nobject.\n\n\n\n--------------------------------------------------------------------------------\n\n\nLegacy API (v0.0.1-beta.8 and earlier)#\n\n\nuseStorage (Vue) - v0.0.1-beta.8#\n\nThe useStorage function is the core API of the ew-responsive-store library. It\nallows you to create reactive state that is synchronized with browser storage\n(localStorage or sessionStorage).\n\nType Definition#\n\n\n\nParameters#\n\nPARAMETER      TYPE           DESCRIPTION\nkey            string         The key to use for storing the value in storage\ninitialValue   T              The initial value to use if no value is found in storage\noptions        StoreOptions   Configuration options (optional)\n\nOptions#\n\nThe options parameter accepts the following properties:\n\nPROPERTY   TYPE        DEFAULT           DESCRIPTION\nstorage    StoreType   StoreType.LOCAL   The storage type to use (localStorage or sessionStorage)\ndeep       boolean     true              Whether to deeply watch the state for changes\n\nAdditionally, all Vue watch options are supported, as StoreOptions extends\nWatchOptions from Vue.\n\nReturns#\n\nA reactive Ref<T> that is synchronized with the specified storage.\n\nExample#\n\n\n\n\nuseReactStorage (React) - v0.0.1-beta.7#\n\nThe useReactStorage function is designed specifically for React applications. It\nprovides a React-native way to manage state that is synchronized with browser\nstorage.\n\n\nType Definition#\n\n\n\n\nParameters#\n\nPARAMETER      TYPE                DESCRIPTION\nkey            string              The key to use for storing the value in storage\ninitialValue   T                   The initial value to use if no value is found in storage\noptions        ReactStoreOptions   Configuration options (optional)\n\n\nOptions#\n\nThe options parameter accepts the following properties:\n\nPROPERTY   TYPE        DEFAULT           DESCRIPTION\nstorage    StoreType   StoreType.LOCAL   The storage type to use (localStorage or sessionStorage)\n\n\nReturns#\n\nA tuple containing:\n\n * [0]: The current value of type T\n * [1]: A setter function to update the value\n\n\nExample#\n\n\n\n\nCross-tab Synchronization#\n\nuseReactStorage automatically synchronizes data across browser tabs using the\nstorage event:\n\n\n\n\nError Handling#\n\nThe hook will throw an error if storage is not available:\n\n\n\n\nparseStr#\n\nThe parseStr function is a utility for parsing string values. It provides two\nparsing modes: EVAL and JSON.\n\n\nType Definition#\n\n\n\n\nParameters#\n\nPARAMETER   TYPE           DESCRIPTION\nstr         string         The string to parse\ntype        parseStrType   The parsing method to use (JSON or EVAL)\n\n\nReturns#\n\nThe parsed value of type T, or null if parsing fails.\n\n\nExample#\n\n\n\n\nUtility Functions#\n\n\nisValidJSON#\n\nChecks if a string is valid JSON.\n\n\n\n\nisStorageEnabled#\n\nChecks if a storage type is enabled in the current environment.\n\n\n\n\nEnums#\n\n\nStoreType#\n\nDefines the available storage types.\n\n\n\n\nparseStrType#\n\nDefines the available parsing methods for parseStr.\n\n","routePath":"/ew-responsive-store/en/api/","lang":"en","toc":[{"text":"⚠️ Important Version Notice","id":"️-important-version-notice","depth":2,"charIndex":3},{"text":"v0.0.3 Breaking Changes","id":"v003-breaking-changes","depth":3,"charIndex":34},{"text":"Migration Guide","id":"migration-guide","depth":3,"charIndex":351},{"text":"v0.0.3+ Multi-Framework Support","id":"v003-multi-framework-support","depth":2,"charIndex":522},{"text":"useStorage (Vue) - v0.0.3+","id":"usestorage-vue---v003","depth":3,"charIndex":557},{"text":"Type Definition","id":"type-definition","depth":3,"charIndex":779},{"text":"Parameters","id":"parameters","depth":3,"charIndex":800},{"text":"Options","id":"options","depth":3,"charIndex":1085},{"text":"Returns","id":"returns","depth":3,"charIndex":1491},{"text":"Example","id":"example","depth":3,"charIndex":1570},{"text":"useStorage (React) - v0.0.3+","id":"usestorage-react---v003","depth":3,"charIndex":1583},{"text":"Type Definition","id":"type-definition-1","depth":4,"charIndex":1694},{"text":"Parameters","id":"parameters-1","depth":4,"charIndex":1714},{"text":"Options","id":"options-1","depth":4,"charIndex":2018},{"text":"Returns","id":"returns-1","depth":4,"charIndex":2237},{"text":"Example","id":"example-1","depth":4,"charIndex":2351},{"text":"useStorage (Preact) - v0.0.3+","id":"usestorage-preact---v003","depth":3,"charIndex":2364},{"text":"useStorage (Solid) - v0.0.3+","id":"usestorage-solid---v003","depth":3,"charIndex":2487},{"text":"useStorage (Svelte) - v0.0.3+","id":"usestorage-svelte---v003","depth":3,"charIndex":2587},{"text":"useStorage (Angular) - v0.0.3+","id":"usestorage-angular---v003","depth":3,"charIndex":2688},{"text":"useStorage (Vanilla JS) - v0.0.3+","id":"usestorage-vanilla-js---v003","depth":3,"charIndex":2794},{"text":"Legacy API (v0.0.1-beta.8 and earlier)","id":"legacy-api-v001-beta8-and-earlier","depth":2,"charIndex":3005},{"text":"useStorage (Vue) - v0.0.1-beta.8","id":"usestorage-vue---v001-beta8","depth":3,"charIndex":3047},{"text":"Type Definition","id":"type-definition-2","depth":4,"charIndex":3274},{"text":"Parameters","id":"parameters-2","depth":4,"charIndex":3294},{"text":"Options","id":"options-2","depth":4,"charIndex":3578},{"text":"Returns","id":"returns-2","depth":4,"charIndex":3983},{"text":"Example","id":"example-2","depth":4,"charIndex":4061},{"text":"useReactStorage (React) - v0.0.1-beta.7","id":"usereactstorage-react---v001-beta7","depth":2,"charIndex":4074},{"text":"Type Definition","id":"type-definition-3","depth":3,"charIndex":4286},{"text":"Parameters","id":"parameters-3","depth":3,"charIndex":4307},{"text":"Options","id":"options-3","depth":3,"charIndex":4612},{"text":"Returns","id":"returns-3","depth":3,"charIndex":4832},{"text":"Example","id":"example-3","depth":3,"charIndex":4947},{"text":"Cross-tab Synchronization","id":"cross-tab-synchronization","depth":3,"charIndex":4960},{"text":"Error Handling","id":"error-handling","depth":3,"charIndex":5085},{"text":"parseStr","id":"parsestr","depth":2,"charIndex":5164},{"text":"Type Definition","id":"type-definition-4","depth":3,"charIndex":5285},{"text":"Parameters","id":"parameters-4","depth":3,"charIndex":5306},{"text":"Returns","id":"returns-4","depth":3,"charIndex":5475},{"text":"Example","id":"example-4","depth":3,"charIndex":5541},{"text":"Utility Functions","id":"utility-functions","depth":2,"charIndex":5554},{"text":"isValidJSON","id":"isvalidjson","depth":3,"charIndex":5575},{"text":"isStorageEnabled","id":"isstorageenabled","depth":3,"charIndex":5627},{"text":"Enums","id":"enums","depth":2,"charIndex":5714},{"text":"StoreType","id":"storetype","depth":3,"charIndex":5723},{"text":"parseStrType","id":"parsestrtype","depth":3,"charIndex":5776}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Examples","content":"#\n\nThis section provides practical examples of using ew-responsive-store in\ndifferent scenarios.\n\n\nBasic Counter Example#\n\nA simple counter that persists its value in localStorage:\n\n\n\n\nUser Preferences#\n\nManaging user preferences that persist across sessions:\n\n\n\n\nShopping Cart#\n\nImplementing a shopping cart that persists items between page refreshes:\n\n\n\n\nForm State Persistence#\n\nSaving form state to prevent data loss when navigating away:\n\n\n\n\nUsing with Vue.js#\n\nIntegrating with Vue.js components:\n\n\n\n\nUsing with React#\n\n\nBasic React Example with useReactStorage#\n\nThe recommended way to use ew-responsive-store with React is through the\nuseReactStorage hook:\n\n\n\n\nTodo List with React#\n\nA complete todo list example using useReactStorage:\n\n\n\n\nCross-tab Synchronization#\n\nReact components automatically sync across browser tabs:\n\n\n\n\nUsing with Vue (Legacy)#\n\nIf you need to use the Vue version in React (not recommended), you can do it\nlike this:\n\n\n\n\nAdvanced Usage: Custom Serialization#\n\nUsing custom serialization for complex data structures:\n\n","routePath":"/ew-responsive-store/en/examples/","lang":"en","toc":[{"text":"Basic Counter Example","id":"basic-counter-example","depth":2,"charIndex":98},{"text":"User Preferences","id":"user-preferences","depth":2,"charIndex":184},{"text":"Shopping Cart","id":"shopping-cart","depth":2,"charIndex":263},{"text":"Form State Persistence","id":"form-state-persistence","depth":2,"charIndex":356},{"text":"Using with Vue.js","id":"using-with-vuejs","depth":2,"charIndex":446},{"text":"Using with React","id":"using-with-react","depth":2,"charIndex":506},{"text":"Basic React Example with useReactStorage","id":"basic-react-example-with-usereactstorage","depth":3,"charIndex":526},{"text":"Todo List with React","id":"todo-list-with-react","depth":3,"charIndex":668},{"text":"Cross-tab Synchronization","id":"cross-tab-synchronization","depth":3,"charIndex":747},{"text":"Using with Vue (Legacy)","id":"using-with-vue-legacy","depth":3,"charIndex":836},{"text":"Advanced Usage: Custom Serialization","id":"advanced-usage-custom-serialization","depth":2,"charIndex":954}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Getting Started","content":"#\n\n\nIntroduction#\n\nIf your project requires using session storage (either localStorage or\nsessionStorage) to persist data, and you want the data to be retained after a\npage refresh while also automatically updating the view when the data changes,\new-responsive-store is the perfect solution.\n\nIt's under 1 KB in size and extremely easy to use. With just a single function\ncall, you can make session storage data reactive, which can be applied to any\nframework-based project, even native JavaScript projects. The library also\nincludes comprehensive unit tests and type inference.\n\n\nInstallation#\n\nFirst, you need to install the ew-responsive-store package. You can install it\nusing the following command:\n\n\n\n\nFramework Dependencies#\n\nSince v0.0.3, ew-responsive-store supports multiple frameworks. You only need to\ninstall the framework you're using:\n\n\n\nNote: Framework dependencies are treated as external, so they won't be bundled\nwith your application, keeping the library size minimal.\n\n\nFramework-Specific Imports#\n\nSince v0.0.3, you should import from framework-specific entry points:\n\n\n\n\nBasic Usage#\n\nThe core of the ew-responsive-store package exports two methods: parseStr and\nuseStorage. The useStorage method is used to make session storage data reactive.\n\n\nBasic Values#\n\nYou can use useStorage to create reactive basic values. For example, let's say\nyou have a counter stored in localStorage:\n\n\n\nVue Template Code:\n\n\n\nAt this point, the value of count is stored in the browser's session storage,\nand it is reactive, meaning it will persist even after the page refreshes and\nthe view will update automatically when the value changes.\n\n\nObject Values#\n\nYou can also store reactive objects in a similar way:\n\n\n\nWhen you change the name property of userInfo, the view will automatically\nupdate, and the data will be saved in session storage.\n\n\nArray Values#\n\nYou can also store arrays, and they will be reactive as well:\n\n\n\nFor more advanced usage and configuration options, check out the API Reference\nsection.","routePath":"/ew-responsive-store/en/guide/","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":580},{"text":"Framework Dependencies","id":"framework-dependencies","depth":3,"charIndex":707},{"text":"Framework-Specific Imports","id":"framework-specific-imports","depth":2,"charIndex":990},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":1093},{"text":"Basic Values","id":"basic-values","depth":3,"charIndex":1268},{"text":"Object Values","id":"object-values","depth":3,"charIndex":1647},{"text":"Array Values","id":"array-values","depth":3,"charIndex":1852}],"domain":"","frontmatter":{},"version":""}]