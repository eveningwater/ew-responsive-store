[{"id":0,"title":"API Reference","content":"#\n\n\nuseStorage#\n\nThe useStorage function is the core API of the ew-responsive-store library. It\nallows you to create reactive state that is synchronized with browser storage\n(localStorage or sessionStorage).\n\n\nType Definition#\n\n\n\n\nParameters#\n\nPARAMETER      TYPE           DESCRIPTION\nkey            string         The key to use for storing the value in storage\ninitialValue   T              The initial value to use if no value is found in storage\noptions        StoreOptions   Configuration options (optional)\n\n\nOptions#\n\nThe options parameter accepts the following properties:\n\nPROPERTY    TYPE        DEFAULT           DESCRIPTION\nstorage     StoreType   StoreType.LOCAL   The storage type to use (localStorage or sessionStorage)\nimmediate   boolean     true              Whether to trigger the effect immediately\ndeep        boolean     true              Whether to deeply watch the state for changes\n\nAdditionally, all Vue watch options are supported, as StoreOptions extends\nWatchOptions from Vue.\n\n\nReturns#\n\nA reactive Ref<T> that is synchronized with the specified storage.\n\n\nExample#\n\n\n\n\nparseStr#\n\nThe parseStr function is a utility for parsing string values. It provides two\nparsing modes: EVAL and JSON.\n\n\nType Definition#\n\n\n\n\nParameters#\n\nPARAMETER   TYPE           DESCRIPTION\nstr         string         The string to parse\ntype        parseStrType   The parsing method to use (JSON or EVAL)\n\n\nReturns#\n\nThe parsed value of type T, or null if parsing fails.\n\n\nExample#\n\n\n\n\nUtility Functions#\n\n\nisValidJSON#\n\nChecks if a string is valid JSON.\n\n\n\n\nisStorageEnabled#\n\nChecks if a storage type is enabled in the current environment.\n\n\n\n\nEnums#\n\n\nStoreType#\n\nDefines the available storage types.\n\n\n\n\nparseStrType#\n\nDefines the available parsing methods for parseStr.\n\n","routePath":"/ew-responsive-store/en/api/","lang":"en","toc":[{"text":"useStorage","id":"usestorage","depth":2,"charIndex":3},{"text":"Type Definition","id":"type-definition","depth":3,"charIndex":209},{"text":"Parameters","id":"parameters","depth":3,"charIndex":230},{"text":"Options","id":"options","depth":3,"charIndex":515},{"text":"Returns","id":"returns","depth":3,"charIndex":1008},{"text":"Example","id":"example","depth":3,"charIndex":1087},{"text":"parseStr","id":"parsestr","depth":2,"charIndex":1100},{"text":"Type Definition","id":"type-definition-1","depth":3,"charIndex":1221},{"text":"Parameters","id":"parameters-1","depth":3,"charIndex":1242},{"text":"Returns","id":"returns-1","depth":3,"charIndex":1411},{"text":"Example","id":"example-1","depth":3,"charIndex":1477},{"text":"Utility Functions","id":"utility-functions","depth":2,"charIndex":1490},{"text":"isValidJSON","id":"isvalidjson","depth":3,"charIndex":1511},{"text":"isStorageEnabled","id":"isstorageenabled","depth":3,"charIndex":1563},{"text":"Enums","id":"enums","depth":2,"charIndex":1650},{"text":"StoreType","id":"storetype","depth":3,"charIndex":1659},{"text":"parseStrType","id":"parsestrtype","depth":3,"charIndex":1712}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Examples","content":"#\n\nThis section provides practical examples of using ew-responsive-store in\ndifferent scenarios.\n\n\nBasic Counter Example#\n\nA simple counter that persists its value in localStorage:\n\n\n\n\nUser Preferences#\n\nManaging user preferences that persist across sessions:\n\n\n\n\nShopping Cart#\n\nImplementing a shopping cart that persists items between page refreshes:\n\n\n\n\nForm State Persistence#\n\nSaving form state to prevent data loss when navigating away:\n\n\n\n\nUsing with Vue.js#\n\nIntegrating with Vue.js components:\n\n\n\n\nUsing with React#\n\nIntegrating with React components:\n\n\n\n\nAdvanced Usage: Custom Serialization#\n\nUsing custom serialization for complex data structures:\n\n","routePath":"/ew-responsive-store/en/examples/","lang":"en","toc":[{"text":"Basic Counter Example","id":"basic-counter-example","depth":2,"charIndex":98},{"text":"User Preferences","id":"user-preferences","depth":2,"charIndex":184},{"text":"Shopping Cart","id":"shopping-cart","depth":2,"charIndex":263},{"text":"Form State Persistence","id":"form-state-persistence","depth":2,"charIndex":356},{"text":"Using with Vue.js","id":"using-with-vuejs","depth":2,"charIndex":446},{"text":"Using with React","id":"using-with-react","depth":2,"charIndex":506},{"text":"Advanced Usage: Custom Serialization","id":"advanced-usage-custom-serialization","depth":2,"charIndex":564}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Getting Started","content":"#\n\n\nIntroduction#\n\nIf your project requires using session storage (either localStorage or\nsessionStorage) to persist data, and you want the data to be retained after a\npage refresh while also automatically updating the view when the data changes,\new-responsive-store is the perfect solution.\n\nIt's under 1 KB in size and extremely easy to use. With just a single function\ncall, you can make session storage data reactive, which can be applied to any\nframework-based project, even native JavaScript projects. The library also\nincludes comprehensive unit tests and type inference.\n\n\nInstallation#\n\nFirst, you need to install the ew-responsive-store package. You can install it\nusing the following command:\n\n\n\n\nBasic Usage#\n\nThe core of the ew-responsive-store package exports two methods: parseStr and\nuseStorage. The useStorage method is used to make session storage data reactive.\n\n\nBasic Values#\n\nYou can use useStorage to create reactive basic values. For example, let's say\nyou have a counter stored in localStorage:\n\n\n\nVue Template Code:\n\n\n\nAt this point, the value of count is stored in the browser's session storage,\nand it is reactive, meaning it will persist even after the page refreshes and\nthe view will update automatically when the value changes.\n\n\nObject Values#\n\nYou can also store reactive objects in a similar way:\n\n\n\nWhen you change the name property of userInfo, the view will automatically\nupdate, and the data will be saved in session storage.\n\n\nArray Values#\n\nYou can also store arrays, and they will be reactive as well:\n\n\n\nFor more advanced usage and configuration options, check out the API Reference\nsection.","routePath":"/ew-responsive-store/en/guide/","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":580},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":707},{"text":"Basic Values","id":"basic-values","depth":3,"charIndex":882},{"text":"Object Values","id":"object-values","depth":3,"charIndex":1261},{"text":"Array Values","id":"array-values","depth":3,"charIndex":1466}],"domain":"","frontmatter":{},"version":""}]