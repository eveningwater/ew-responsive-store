[{"id":4,"title":"API 参考","content":"#\n\n\nuseStorage#\n\nuseStorage 函数是 ew-responsive-store 库的核心 API。它允许你创建与浏览器存储（localStorage 或\nsessionStorage）同步的响应式状态。\n\n\n类型定义#\n\n\n\n\n参数#\n\n参数             类型             描述\nkey            string         用于在存储中存储值的键\ninitialValue   T              如果在存储中找不到值，则使用的初始值\noptions        StoreOptions   配置选项（可选）\n\n\n选项#\n\noptions 参数接受以下属性：\n\n属性          类型          默认值               描述\nstorage     StoreType   StoreType.LOCAL   要使用的存储类型（localStorage 或 sessionStorage）\nimmediate   boolean     true              是否立即触发效果\ndeep        boolean     true              是否深度监视状态变化\n\n此外，所有 Vue 的 watch 选项都受支持，因为 StoreOptions 扩展了 Vue 的 WatchOptions。\n\n\n返回值#\n\n一个与指定存储同步的响应式 Ref<T>。\n\n\n示例#\n\n\n\n\nparseStr#\n\nparseStr 函数是一个用于解析字符串值的实用工具。它提供了两种解析模式：EVAL 和 JSON。\n\n\n类型定义#\n\n\n\n\n参数#\n\n参数     类型             描述\nstr    string         要解析的字符串\ntype   parseStrType   要使用的解析方法（JSON 或 EVAL）\n\n\n返回值#\n\n类型为 T 的解析值，如果解析失败则为 null。\n\n\n示例#\n\n\n\n\n实用函数#\n\n\nisValidJSON#\n\n检查字符串是否为有效的 JSON。\n\n\n\n\nisStorageEnabled#\n\n检查当前环境中是否启用了存储类型。\n\n\n\n\n枚举#\n\n\nStoreType#\n\n定义可用的存储类型。\n\n\n\n\nparseStrType#\n\n定义 parseStr 的可用解析方法。\n\n","routePath":"/ew-responsive-store/api/","lang":"zh","toc":[{"text":"useStorage","id":"usestorage","depth":2,"charIndex":3},{"text":"类型定义","id":"类型定义","depth":3,"charIndex":115},{"text":"参数","id":"参数","depth":3,"charIndex":125},{"text":"选项","id":"选项","depth":3,"charIndex":295},{"text":"返回值","id":"返回值","depth":3,"charIndex":618},{"text":"示例","id":"示例","depth":3,"charIndex":648},{"text":"parseStr","id":"parsestr","depth":2,"charIndex":656},{"text":"类型定义","id":"类型定义-1","depth":3,"charIndex":721},{"text":"参数","id":"参数-1","depth":3,"charIndex":731},{"text":"返回值","id":"返回值-1","depth":3,"charIndex":837},{"text":"示例","id":"示例-1","depth":3,"charIndex":871},{"text":"实用函数","id":"实用函数","depth":2,"charIndex":879},{"text":"isValidJSON","id":"isvalidjson","depth":3,"charIndex":887},{"text":"isStorageEnabled","id":"isstorageenabled","depth":3,"charIndex":923},{"text":"枚举","id":"枚举","depth":2,"charIndex":964},{"text":"StoreType","id":"storetype","depth":3,"charIndex":970},{"text":"parseStrType","id":"parsestrtype","depth":3,"charIndex":997}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"示例","content":"#\n\n本节提供了在不同场景中使用 ew-responsive-store 的实用示例。\n\n\n基础计数器示例#\n\n一个简单的计数器，其值在 localStorage 中持久化：\n\n\n\n\n用户偏好设置#\n\n管理在会话之间持久化的用户偏好设置：\n\n\n\n\n购物车#\n\n实现在页面刷新之间持久化商品的购物车：\n\n\n\n\n表单状态持久化#\n\n保存表单状态，防止在导航离开时数据丢失：\n\n\n\n\n与 Vue.js 一起使用#\n\n与 Vue.js 组件集成：\n\n\n\n\n与 React 一起使用#\n\n与 React 组件集成：\n\n\n\n\n高级用法：自定义序列化#\n\n为复杂数据结构使用自定义序列化：\n\n","routePath":"/ew-responsive-store/examples/","lang":"zh","toc":[{"text":"基础计数器示例","id":"基础计数器示例","depth":2,"charIndex":45},{"text":"用户偏好设置","id":"用户偏好设置","depth":2,"charIndex":91},{"text":"购物车","id":"购物车","depth":2,"charIndex":123},{"text":"表单状态持久化","id":"表单状态持久化","depth":2,"charIndex":153},{"text":"与 Vue.js 一起使用","id":"与-vuejs-一起使用","depth":2,"charIndex":188},{"text":"与 React 一起使用","id":"与-react-一起使用","depth":2,"charIndex":223},{"text":"高级用法：自定义序列化","id":"高级用法自定义序列化","depth":2,"charIndex":256}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"开始使用","content":"#\n\n\n介绍#\n\n如果你的项目中需要使用会话存储（localStorage 或\nsessionStorage）来保存数据，且希望这些数据在页面刷新后依然能保留，并且能够在数据变化时自动更新界面，那么 ew-responsive-store\n是完美的解决方案。\n\n它的体积不到 1 KB，简单易用，只需要调用一个方法就能将会话存储的数据变成响应式数据，可以广泛应用于各种框架的项目中，甚至是原生 JavaScript\n项目，该库还具备完善的单元测试和类型推导。\n\n\n安装#\n\n首先，你需要安装 ew-responsive-store 包。可以通过以下命令安装：\n\n\n\n\n基本使用#\n\new-responsive-store 包的核心导出了两个方法：parseStr 和 useStorage。其中，useStorage\n用于将会话存储的数据变为响应式数据。\n\n\n基本值#\n\n你可以使用 useStorage 来实现基本值的响应式。例如，假设你有一个计数器，存储在 localStorage 中：\n\n\n\nVue 模板代码：\n\n\n\n此时，count 的值会保存在浏览器的会话存储中，并且它是响应式的，即页面刷新后 count 依然保留并且视图会自动更新。\n\n\n对象值#\n\n同样地，你可以将对象存储为响应式数据：\n\n\n\n当修改 userInfo 的 name 属性时，视图会自动更新，并且数据会保存在会话存储中。\n\n\n数组值#\n\n你还可以存储数组，并且它也是响应式的：\n\n\n\n有关更高级的用法和配置选项，请查看 API 参考 部分。","routePath":"/ew-responsive-store/guide/","lang":"zh","toc":[{"text":"介绍","id":"介绍","depth":2,"charIndex":3},{"text":"安装","id":"安装","depth":2,"charIndex":231},{"text":"基本使用","id":"基本使用","depth":2,"charIndex":283},{"text":"基本值","id":"基本值","depth":3,"charIndex":379},{"text":"对象值","id":"对象值","depth":3,"charIndex":526},{"text":"数组值","id":"数组值","depth":3,"charIndex":604}],"domain":"","frontmatter":{},"version":""}]