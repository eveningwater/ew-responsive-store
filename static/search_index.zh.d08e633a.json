[{"id":4,"title":"API 参考","content":"#\n\n\n⚠️ 重要版本说明#\n\n\nv0.0.3 破坏性变更#\n\nv0.0.3 版本引入了重大变更，包括：\n\n 1. 框架专用入口点：现在需要从特定的框架入口点导入\n 2. 统一的API：所有框架都使用 useStorage 函数名\n 3. 零外部依赖：框架依赖作为外部依赖处理\n\n\n迁移指南#\n\n旧版本 (v0.0.1-beta.8 及之前)：\n\n\n\n新版本 (v0.0.3+)：\n\n\n\n--------------------------------------------------------------------------------\n\n\nv0.0.3+ 多框架支持#\n\n\nuseStorage (Vue) - v0.0.3+#\n\nuseStorage 函数是 ew-responsive-store 库的核心 API。它允许你创建与浏览器存储（localStorage 或\nsessionStorage）同步的响应式状态。\n\n\n类型定义#\n\n\n\n\n参数#\n\n参数             类型             描述\nkey            string         用于在存储中存储值的键\ninitialValue   T              如果在存储中找不到值，则使用的初始值\noptions        StoreOptions   配置选项（可选）\n\n\n选项#\n\noptions 参数接受以下属性：\n\n属性        类型          默认值               描述\nstorage   StoreType   StoreType.LOCAL   要使用的存储类型（localStorage 或 sessionStorage）\ndeep      boolean     true              是否深度监视状态变化\n\n此外，所有 Vue 的 watch 选项都受支持，因为 StoreOptions 扩展了 Vue 的 WatchOptions。\n\n\n返回值#\n\n一个与指定存储同步的响应式 Ref<T>。\n\n\n示例#\n\n\n\n\nuseStorage (React) - v0.0.3+#\n\nReact 版本的 useStorage 函数，提供 React 原生的使用体验。\n\n类型定义#\n\n\n\n参数#\n\n参数             类型                  描述\nkey            string              用于在存储中存储值的键\ninitialValue   T                   如果在存储中找不到值，则使用的初始值\noptions        ReactStoreOptions   配置选项（可选）\n\n选项#\n\noptions 参数接受以下属性：\n\n属性        类型          默认值               描述\nstorage   StoreType   StoreType.LOCAL   要使用的存储类型（localStorage 或 sessionStorage）\n\n返回值#\n\n一个包含以下内容的元组：\n\n * [0]: 当前值，类型为 T\n * [1]: 用于更新值的设置函数\n\n示例#\n\n\n\n\nuseStorage (Preact) - v0.0.3+#\n\nPreact 版本的 useStorage 函数，与 React API 相同但针对 Preact 优化。\n\n\n\n\nuseStorage (Solid) - v0.0.3+#\n\nSolid 版本的 useStorage 函数，返回 Solid 的 signal。\n\n\n\n\nuseStorage (Svelte) - v0.0.3+#\n\nSvelte 版本的 useStorage 函数，返回 Svelte store。\n\n\n\n\nuseStorage (Angular) - v0.0.3+#\n\nAngular 版本的 useStorage 函数，返回 Angular signal。\n\n\n\n\nuseStorage (Vanilla JS) - v0.0.3+#\n\n原生 JavaScript 版本的 useStorage 函数，返回存储管理器对象。\n\n\n\n--------------------------------------------------------------------------------\n\n\n历史版本 API (v0.0.1-beta.8 及之前)#\n\n\nuseStorage (Vue) - v0.0.1-beta.8#\n\nuseStorage 函数是 ew-responsive-store 库的核心 API。它允许你创建与浏览器存储（localStorage 或\nsessionStorage）同步的响应式状态。\n\n类型定义#\n\n\n\n参数#\n\n参数             类型             描述\nkey            string         用于在存储中存储值的键\ninitialValue   T              如果在存储中找不到值，则使用的初始值\noptions        StoreOptions   配置选项（可选）\n\n选项#\n\noptions 参数接受以下属性：\n\n属性        类型          默认值               描述\nstorage   StoreType   StoreType.LOCAL   要使用的存储类型（localStorage 或 sessionStorage）\ndeep      boolean     true              是否深度监视状态变化\n\n此外，所有 Vue 的 watch 选项都受支持，因为 StoreOptions 扩展了 Vue 的 WatchOptions。\n\n返回值#\n\n一个与指定存储同步的响应式 Ref<T>。\n\n示例#\n\n\n\n\nuseReactStorage (React) - v0.0.1-beta.7#\n\nuseReactStorage 函数专为 React 应用程序设计。它提供了一种 React 原生的方式来管理与浏览器存储同步的状态。\n\n\n类型定义#\n\n\n\n\n参数#\n\n参数             类型                  描述\nkey            string              用于在存储中存储值的键\ninitialValue   T                   如果在存储中找不到值，则使用的初始值\noptions        ReactStoreOptions   配置选项（可选）\n\n\n选项#\n\noptions 参数接受以下属性：\n\n属性        类型          默认值               描述\nstorage   StoreType   StoreType.LOCAL   要使用的存储类型（localStorage 或 sessionStorage）\n\n\n返回值#\n\n一个包含以下内容的元组：\n\n * [0]: 当前值，类型为 T\n * [1]: 用于更新值的设置函数\n\n\n示例#\n\n\n\n\n跨标签页同步#\n\nuseReactStorage 使用 storage 事件自动同步不同浏览器标签页之间的数据：\n\n\n\n\n错误处理#\n\n如果存储不可用，该钩子会抛出错误：\n\n\n\n\nparseStr#\n\nparseStr 函数是一个用于解析字符串值的实用工具。它提供了两种解析模式：EVAL 和 JSON。\n\n\n类型定义#\n\n\n\n\n参数#\n\n参数     类型             描述\nstr    string         要解析的字符串\ntype   parseStrType   要使用的解析方法（JSON 或 EVAL）\n\n\n返回值#\n\n类型为 T 的解析值，如果解析失败则为 null。\n\n\n示例#\n\n\n\n\n实用函数#\n\n\nisValidJSON#\n\n检查字符串是否为有效的 JSON。\n\n\n\n\nisStorageEnabled#\n\n检查当前环境中是否启用了存储类型。\n\n\n\n\n枚举#\n\n\nStoreType#\n\n定义可用的存储类型。\n\n\n\n\nparseStrType#\n\n定义 parseStr 的可用解析方法。\n\n","routePath":"/ew-responsive-store/api/","lang":"zh","toc":[{"text":"⚠️ 重要版本说明","id":"️-重要版本说明","depth":2,"charIndex":3},{"text":"v0.0.3 破坏性变更","id":"v003-破坏性变更","depth":3,"charIndex":16},{"text":"迁移指南","id":"迁移指南","depth":3,"charIndex":140},{"text":"v0.0.3+ 多框架支持","id":"v003-多框架支持","depth":2,"charIndex":276},{"text":"useStorage (Vue) - v0.0.3+","id":"usestorage-vue---v003","depth":3,"charIndex":293},{"text":"类型定义","id":"类型定义","depth":3,"charIndex":421},{"text":"参数","id":"参数","depth":3,"charIndex":431},{"text":"选项","id":"选项","depth":3,"charIndex":601},{"text":"返回值","id":"返回值","depth":3,"charIndex":867},{"text":"示例","id":"示例","depth":3,"charIndex":897},{"text":"useStorage (React) - v0.0.3+","id":"usestorage-react---v003","depth":3,"charIndex":905},{"text":"类型定义","id":"类型定义-1","depth":4,"charIndex":979},{"text":"参数","id":"参数-1","depth":4,"charIndex":988},{"text":"选项","id":"选项-1","depth":4,"charIndex":1177},{"text":"返回值","id":"返回值-1","depth":4,"charIndex":1325},{"text":"示例","id":"示例-1","depth":4,"charIndex":1383},{"text":"useStorage (Preact) - v0.0.3+","id":"usestorage-preact---v003","depth":3,"charIndex":1391},{"text":"useStorage (Solid) - v0.0.3+","id":"usestorage-solid---v003","depth":3,"charIndex":1481},{"text":"useStorage (Svelte) - v0.0.3+","id":"usestorage-svelte---v003","depth":3,"charIndex":1559},{"text":"useStorage (Angular) - v0.0.3+","id":"usestorage-angular---v003","depth":3,"charIndex":1637},{"text":"useStorage (Vanilla JS) - v0.0.3+","id":"usestorage-vanilla-js---v003","depth":3,"charIndex":1719},{"text":"历史版本 API (v0.0.1-beta.8 及之前)","id":"历史版本-api-v001-beta8-及之前","depth":2,"charIndex":1884},{"text":"useStorage (Vue) - v0.0.1-beta.8","id":"usestorage-vue---v001-beta8","depth":3,"charIndex":1916},{"text":"类型定义","id":"类型定义-2","depth":4,"charIndex":2049},{"text":"参数","id":"参数-2","depth":4,"charIndex":2058},{"text":"选项","id":"选项-2","depth":4,"charIndex":2227},{"text":"返回值","id":"返回值-2","depth":4,"charIndex":2492},{"text":"示例","id":"示例-2","depth":4,"charIndex":2521},{"text":"useReactStorage (React) - v0.0.1-beta.7","id":"usereactstorage-react---v001-beta7","depth":2,"charIndex":2529},{"text":"类型定义","id":"类型定义-3","depth":3,"charIndex":2641},{"text":"参数","id":"参数-3","depth":3,"charIndex":2651},{"text":"选项","id":"选项-3","depth":3,"charIndex":2841},{"text":"返回值","id":"返回值-3","depth":3,"charIndex":2990},{"text":"示例","id":"示例-3","depth":3,"charIndex":3049},{"text":"跨标签页同步","id":"跨标签页同步","depth":3,"charIndex":3057},{"text":"错误处理","id":"错误处理","depth":3,"charIndex":3118},{"text":"parseStr","id":"parsestr","depth":2,"charIndex":3147},{"text":"类型定义","id":"类型定义-4","depth":3,"charIndex":3212},{"text":"参数","id":"参数-4","depth":3,"charIndex":3222},{"text":"返回值","id":"返回值-4","depth":3,"charIndex":3328},{"text":"示例","id":"示例-4","depth":3,"charIndex":3362},{"text":"实用函数","id":"实用函数","depth":2,"charIndex":3370},{"text":"isValidJSON","id":"isvalidjson","depth":3,"charIndex":3378},{"text":"isStorageEnabled","id":"isstorageenabled","depth":3,"charIndex":3414},{"text":"枚举","id":"枚举","depth":2,"charIndex":3455},{"text":"StoreType","id":"storetype","depth":3,"charIndex":3461},{"text":"parseStrType","id":"parsestrtype","depth":3,"charIndex":3488}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"示例","content":"#\n\n本节提供了在不同场景中使用 ew-responsive-store 的实用示例。\n\n\n基础计数器示例#\n\n一个简单的计数器，其值在 localStorage 中持久化：\n\n\n\n\n用户偏好设置#\n\n管理在会话之间持久化的用户偏好设置：\n\n\n\n\n购物车#\n\n实现在页面刷新之间持久化商品的购物车：\n\n\n\n\n表单状态持久化#\n\n保存表单状态，防止在导航离开时数据丢失：\n\n\n\n\n与 Vue.js 一起使用#\n\n与 Vue.js 组件集成：\n\n\n\n\n与 React 一起使用#\n\n\n使用 useReactStorage 的基本 React 示例#\n\n在 React 中使用 ew-responsive-store 的推荐方式是通过 useReactStorage 钩子：\n\n\n\n\nReact 待办事项列表#\n\n使用 useReactStorage 的完整待办事项列表示例：\n\n\n\n\n跨标签页同步#\n\nReact 组件会自动在不同浏览器标签页之间同步：\n\n\n\n\n与 Vue 一起使用（传统方式）#\n\n如果您需要在 React 中使用 Vue 版本（不推荐），可以这样做：\n\n\n\n\n高级用法：自定义序列化#\n\n为复杂数据结构使用自定义序列化：\n\n","routePath":"/ew-responsive-store/examples/","lang":"zh","toc":[{"text":"基础计数器示例","id":"基础计数器示例","depth":2,"charIndex":45},{"text":"用户偏好设置","id":"用户偏好设置","depth":2,"charIndex":91},{"text":"购物车","id":"购物车","depth":2,"charIndex":123},{"text":"表单状态持久化","id":"表单状态持久化","depth":2,"charIndex":153},{"text":"与 Vue.js 一起使用","id":"与-vuejs-一起使用","depth":2,"charIndex":188},{"text":"与 React 一起使用","id":"与-react-一起使用","depth":2,"charIndex":223},{"text":"使用 useReactStorage 的基本 React 示例","id":"使用-usereactstorage-的基本-react-示例","depth":3,"charIndex":239},{"text":"React 待办事项列表","id":"react-待办事项列表","depth":3,"charIndex":338},{"text":"跨标签页同步","id":"跨标签页同步","depth":3,"charIndex":389},{"text":"与 Vue 一起使用（传统方式）","id":"与-vue-一起使用传统方式","depth":3,"charIndex":428},{"text":"高级用法：自定义序列化","id":"高级用法自定义序列化","depth":2,"charIndex":487}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"开始使用","content":"#\n\n\n介绍#\n\n如果你的项目中需要使用会话存储（localStorage 或\nsessionStorage）来保存数据，且希望这些数据在页面刷新后依然能保留，并且能够在数据变化时自动更新界面，那么 ew-responsive-store\n是完美的解决方案。\n\n它的体积不到 1 KB，简单易用，只需要调用一个方法就能将会话存储的数据变成响应式数据，可以广泛应用于各种框架的项目中，甚至是原生 JavaScript\n项目，该库还具备完善的单元测试和类型推导。\n\n\n安装#\n\n首先，你需要安装 ew-responsive-store 包。可以通过以下命令安装：\n\n\n\n\n框架依赖#\n\n自 v0.0.3 起，ew-responsive-store 支持多个框架。你只需要安装你正在使用的框架：\n\n\n\n注意：框架依赖作为外部依赖处理，因此不会打包到你的应用中，保持库的体积最小。\n\n\n框架专用导入#\n\n自 v0.0.3 起，你应该从框架专用入口点导入：\n\n\n\n\n基本使用#\n\new-responsive-store 包的核心导出了两个方法：parseStr 和 useStorage。其中，useStorage\n用于将会话存储的数据变为响应式数据。\n\n\n基本值#\n\n你可以使用 useStorage 来实现基本值的响应式。例如，假设你有一个计数器，存储在 localStorage 中：\n\n\n\nVue 模板代码：\n\n\n\n此时，count 的值会保存在浏览器的会话存储中，并且它是响应式的，即页面刷新后 count 依然保留并且视图会自动更新。\n\n\n对象值#\n\n同样地，你可以将对象存储为响应式数据：\n\n\n\n当修改 userInfo 的 name 属性时，视图会自动更新，并且数据会保存在会话存储中。\n\n\n数组值#\n\n你还可以存储数组，并且它也是响应式的：\n\n\n\n有关更高级的用法和配置选项，请查看 API 参考 部分。","routePath":"/ew-responsive-store/guide/","lang":"zh","toc":[{"text":"介绍","id":"介绍","depth":2,"charIndex":3},{"text":"安装","id":"安装","depth":2,"charIndex":231},{"text":"框架依赖","id":"框架依赖","depth":3,"charIndex":283},{"text":"框架专用导入","id":"框架专用导入","depth":2,"charIndex":388},{"text":"基本使用","id":"基本使用","depth":2,"charIndex":427},{"text":"基本值","id":"基本值","depth":3,"charIndex":523},{"text":"对象值","id":"对象值","depth":3,"charIndex":670},{"text":"数组值","id":"数组值","depth":3,"charIndex":748}],"domain":"","frontmatter":{},"version":""}]